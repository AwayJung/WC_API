<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wc_api.dao.ChatDAO">

    <insert id="createChatRoom" parameterType="wc_api.model.db.chat.ChatRoom">
        INSERT INTO chat_room (room_id, item_id, created_at)
        VALUES (#{roomId}, #{itemId}, CURRENT_TIMESTAMP)
    </insert>

    <select id="findSellerIdByItemId" resultType="int">
        SELECT seller_id FROM item WHERE item_id = #{itemId}
    </select>

    <insert id="createChatRoomUser" parameterType="wc_api.model.db.chat.ChatRoomUser">
        INSERT IGNORE INTO chat_room_user (room_id, user_id, user_type)
        VALUES (#{roomId}, #{userId}, #{userType})
    </insert>

    <select id="findRoomByItemAndUsers" resultType="wc_api.model.db.chat.ChatRoom">
        SELECT cr.* FROM chat_room cr
                             JOIN chat_room_user cru ON cr.room_id = cru.room_id
        WHERE cr.item_id = #{itemId}
          AND cru.user_id = #{userId}
            LIMIT 1
    </select>

    <select id="findUserTypeInRoom" resultType="String">
        SELECT user_type
        FROM chat_room_user
        WHERE room_id = #{roomId}
          AND user_id = #{userId}
            LIMIT 1
    </select>

    <!-- 마지막 메시지 정보를 포함한 채팅방 목록 조회 -->
    <select id="findRoomsByUserId" resultType="wc_api.model.db.chat.ChatRoom">
        SELECT DISTINCT
            cr.room_id,
            cr.item_id,
            cr.created_at,
            i.price,
            i.description,
            i.title as itemTitle,
            last_msg.content as lastMessage,
            last_msg.sent_time as lastMessageTime,
            -- 상대방 이름만 표시 (역할 제거)
            CASE
                WHEN cru.user_type = 'S' THEN
                    (SELECT u.name
                     FROM chat_room_user cru2
                              JOIN user u ON cru2.user_id = u.id
                     WHERE cru2.room_id = cr.room_id AND cru2.user_type = 'B'
                    LIMIT 1)
                ELSE
                    (SELECT u.name
                     FROM chat_room_user cru2
                     JOIN user u ON cru2.user_id = u.id
                     WHERE cru2.room_id = cr.room_id AND cru2.user_type = 'S'
                     LIMIT 1)
        END as name
        FROM chat_room cr
        JOIN chat_room_user cru ON cr.room_id = cru.room_id
        JOIN item i ON cr.item_id = i.item_id
        LEFT JOIN (
            -- 각 채팅방의 마지막 메시지 조회
            SELECT
                cru_inner.room_id,
                cm.content,
                cm.sent_time,
                ROW_NUMBER() OVER (PARTITION BY cru_inner.room_id ORDER BY cm.sent_time DESC) as rn
            FROM chat_message cm
            JOIN chat_room_user cru_inner ON cm.message_id = cru_inner.message_id
        ) last_msg ON cr.room_id = last_msg.room_id AND last_msg.rn = 1
        WHERE cru.user_id = #{userId}
        ORDER BY COALESCE(last_msg.sent_time, cr.created_at) DESC
    </select>

    <select id="findMessagesByRoomId" resultType="wc_api.model.db.chat.ChatMessage">
        SELECT DISTINCT cm.*
        FROM chat_message cm
                 JOIN chat_room_user cru ON cm.message_id = cru.message_id
        WHERE cru.room_id = #{roomId}
        ORDER BY cm.sent_time ASC
    </select>

    <insert id="insertMessage" parameterType="wc_api.model.db.chat.ChatMessage" useGeneratedKeys="true" keyProperty="messageId">
        INSERT INTO chat_message (content, sent_time, is_read)
        VALUES (
                   #{content, jdbcType=VARCHAR},
                   #{sentTime, jdbcType=TIMESTAMP},
                   false
               )
    </insert>

    <!-- ChatDAO XML 매퍼에 추가 -->
    <select id="countByMessageId" resultType="int">
        SELECT COUNT(*) FROM chat_room_user WHERE message_id = #{messageId}
    </select>

    <select id="findRoomById" resultType="wc_api.model.db.chat.ChatRoom">
        SELECT * FROM chat_room WHERE room_id = #{roomId}
    </select>

    <!-- chat_room_user 테이블에 사용자 정보와 메시지 저장 -->
    <insert id="insertChatRoomUser">
        INSERT INTO chat_room_user (room_id, user_id, user_type, message_id)
        VALUES (#{roomId}, #{userId}, #{userType}, #{messageId})
            ON DUPLICATE KEY UPDATE message_id = #{messageId}
    </insert>

    <update id="updateMessagesReadStatus">
        UPDATE chat_message cm
            JOIN chat_room_user cru ON cm.message_id = cru.message_id
            SET cm.is_read = true
        WHERE cru.room_id = #{roomId}
          AND cm.sender_id != #{userId}
          AND cm.is_read = false
    </update>

    <!-- 채팅방의 모든 사용자 관계 삭제 -->
    <delete id="deleteChatRoomUsersByRoomId">
        DELETE FROM chat_room_user WHERE room_id = #{roomId}
    </delete>

    <!-- 채팅방의 모든 메시지 삭제 -->
    <delete id="deleteMessagesByRoomId">
        DELETE cm FROM chat_message cm
        JOIN chat_room_user cru ON cm.message_id = cru.message_id
        WHERE cru.room_id = #{roomId}
    </delete>

    <!-- 채팅방 삭제 -->
    <delete id="deleteChatRoom">
        DELETE FROM chat_room WHERE room_id = #{roomId}
    </delete>

</mapper>